generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        String    @id @default(cuid())
    body      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    likedIds  String[]
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comments  Comment[]
}

model Comment {
    id        String   @id @default(cuid())
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
}

model Notification {
    id        String   @id @default(cuid())
    body      String
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    //for github auth
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    //the relation above doesn't index the relation, due to this being mysql. To get the indexation we use:
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String         @id @default(cuid())
    name            String?
    username        String?        @unique
    bio             String?
    email           String?        @unique
    emailVerified   DateTime?
    image           String?
    coverImage      String?
    profileImage    String?
    createdAt       DateTime       @default(now())
    hashedPassword  String?
    followingIds    String[]
    hasNotification Boolean?
    accounts        Account[]
    sessions        Session[]
    //
    posts           Post[]
    comments        Comment[]
    notifications   Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
